node {
    stage('Build Fresh Image Sonarqube'){
        checkout scm
        def props = readProperties file: 'sonarqube/build.properties'

        echo "Docker Registry URL: ${props.MSR}"
        docker.withRegistry(props.MSR, props.MSRCREDS){
            docker.build("fdjapi10/sonarqube:${params.BUILDENV}-${props.SONARQUBE_VERSION}",
            "--build-arg JAVA_VERSION=${props.JAVA_VERSION} \
            --build-arg SONARQUBE_VERSION=${props.SONARQUBE_VERSION} \
            sonarqube/").push()
        }
    }

    stage('AWS CloudFormation Deploy PostgreSQL'){
        withAWS(region: 'us-east-1') {
            def stackName = "sonarqube-postgres-stack"
            sh "aws cloudformation deploy --stack-name ${stackName} --template-file sonarqube/template.json --capabilities CAPABILITY_NAMED_IAM --parameter-overrides DBInstanceIdentifier=postgres MasterUsername=mypostgres MasterUserPassword=password DBName=mypostgres VPCSecurityGroupId=sg-0a83a506e3549a0e0 DBSubnetGroupName=my-subnet-group --region us-east-1"

            def stackOutput = sh(returnStdout: true, script: "aws cloudformation describe-stacks --stack-name ${stackName} --query 'Stacks[0].Outputs[0].OutputValue' --output text --region us-east-1").trim()
            env.SONAR_JDBC_URL = "jdbc:postgresql://${stackOutput}:5432/mypostgres"
        }
    }

    stage("Deploy SonarQube ${props.SONARQUBE_VERSION} into ${params.BUILDENV}"){
        def props = readProperties file: 'sonarqube/build.properties'
        docker.withRegistry(props.MSR, props.MSRCREDS){
            def sonarImage = docker.image("fdjapi10/sonarqube:${params.BUILDENV}-${props.SONARQUBE_VERSION}")
            sonarImage.pull()
            sonarImage.withRun("--name sonarqube-${params.BUILDENV} \
                -p 9000:9000 \
                -e SONAR_HOST_URL=${params.SONAR_HOST_URL} \
                -e SONAR_JDBC_URL=${env.SONAR_JDBC_URL} \
                -e SONAR_JDBC_USERNAME=mypostgres \
                -e SONAR_JDBC_PASSWORD=password \
                -e SONAR_SECURITY_REALM=${params.SONAR_SECURITY_REALM} \
                -e SONAR_SECURITY_SAVEPASSWORD=${params.SONAR_SECURITY_SAVEPASSWORD} \
                -e SONAR_TYPESCRIPT_LCOV_REPORTPATHS=${params.SONAR_TYPESCRIPT_LCOV_REPORTPATHS} \
                -d") { c ->
                sh "echo 'Waiting for SonarQube to start'"
                sh "while ! curl -s --head --fail http://${params.SONAR_HOST_URL}:9000; do sleep 5; done"
                sh "echo 'SonarQube is up and running'"
            }
        }
    }
}
